
// Verbum!

var variable :array = [ 3, 1, 3, 3, 7 ];
var variable :array = [ 'V', '♥', true, "Verbum 😍" ];
var variable :array = [ 10 :int, 20 :int, 30.3, 40 :float, true, n ];
var variable :array = [ ];

var variable :array = [
    1, 2, 3,
    [
        'a', 'b', 'c',
        "Verbum", "Divinus",
        3.1337
    ],
    [
        a, b, c,
        10 :int, 20 :int, 30 :float
    ]
];

var a = [
    10 - 10, 
    [ 333 ], 
    20 / func(
        [1, 2, 3]
    )
];


if a < 10 && (10 / (33 - b) - 20) {

}


if [1,2,3] {}

var variable :array = {
    items: [
        { name: "Verbum"  },
        { name: "Divinus" },
        {
            values: [
                10, 20, 30:float, { name: "Member" }
            ]
        },
        31337
    ]
};

var variable = {
    valor: 1.337 :double
};

if a < 10 && (10 / (33 - b) - 20) {}



// Função anônima como valor em variável.
var variable = (fn (a :int) -> int {
    ret a + 10;
});

// Função anônima com array indexado.
var variable = [
    31337,
    (fn (a :int, b :int) -> int {
        ret a + b;   
    })
];

// var value = variable[1](10, 20);

// Função anônima com array associativo.
var variable = {
    identifier : 'onclick',
    callback   : (fn (a :int, b :int) -> int {
        ret a + b;   
    })
};


// Tipos de valores recebidos em variáveis.
var variable = true;
var variable = 'a';
var variable = 'string 1';
var variable = "string 2";
var variable = 123;
var variable = 3.14;
var variable = 0.12345;
var variable = [ 1, 2, 3 ];
var variable = { values: [ 1, 2, 3 ] };
var variable = anotherVariable;

var variable = functionName(10, 20, 30);
var variable = obj::functionName(10, 20, 30);
var variable = obj.functionName(10, 20, 30);

var variable = (10 + 20);
var variable = (variable * 10 + 20 / 30);
if (expression) 
    print("value 1");
elif (expression)
    print("value 2");
else
    print("value 3");
// Comum.
for (var a = 0; a<100; a++)
    print("Hello world\n");

for (var a = 0; ; a++) {
    if (a >= 100)
        break;
}

for (var a = 0; ; a++) {
    if (a < 100)
        next;
}

// Equivalente ao while.
for (a < 10)
    print("a: {}\n", a);

// Loop infinito.
for ()
    print("Infinite...\n");

fn example (a:int, b:int) -> int {
    ret (a * b) + 31337;
}

// Concatenação de funções.
fn primary (a:int, b:int) -> int {
    var value = 31337;

    fn secondary (a:int, b:int) -> int {
        ret (a * b) + value;
    }

    ret secondary(a, b);
}

// Funções anonimas.
print("Value: {}\n", 
    (fn (value :int) -> int { 
        ret value * 3; 
    })(31337)
);

(fn (value :int) -> int { 
    ret value * 3; 
})(31337);


