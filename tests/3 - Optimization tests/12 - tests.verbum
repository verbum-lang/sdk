
// In principio erat Verbum.

// Todos arquivos dentro de um pacote instalado, ou de diret√≥rio espec√≠fico.
use 'std:*';
use 'path/*';

// Importa√ß√µes √∫nicas.
use 'std:io';
use 'std:io/file';
use 'test';
use 'path/path/test';

// Importa√ß√µes m√∫ltiplas (dentro de um √∫nico m√≥dulo ou diret√≥rio).
use 'std:<io, net, os, string>';
use 'path/<file1, file2, file3>';

// Importa√ß√µes m√∫ltiplas em uma √∫nica linha.
use 'std:<io,net>', 'path/test', 'util';
use 'path2/*', 'mysql:*', 'json:unicode';

// Todos arquivos dentro de um pacote instalado, ou de diret√≥rio espec√≠fico.
use 'std:*';
use 'path/*';

// Importa√ß√µes √∫nicas.
use 'std:io';
use 'std:io/file';
use 'test';
use 'path/path/test';

// Importa√ß√µes m√∫ltiplas (dentro de um √∫nico m√≥dulo ou diret√≥rio).
use 'std:<io, net, os, string>';
use 'path/<file1, file2, file3>';

// Importa√ß√µes m√∫ltiplas em uma √∫nica linha.
use 'std:<io,net>', 'path/test', 'util';
use 'path2/*', 'mysql:*', 'json:unicode';

// Para valores comuns o tipo √© inferido automaticamente.
// Os caracteres e strings s√£o UNICODE.
// √â aceito aspas simples ou duplas para as strings e caracteres.
var variable :int       = 31337;
var variable :int       = -1337;
var variable :float     = 0.1337;
var variable :double    = 3.1337;
var variable :double    = -1.337;
var variable :bool      = true;
var variable :char      = '‚ô•';
var variable :string    = 'Verbum üòç';
var variavle :stream    = file.open('archive.bin');

// O UNICODE √© aceito no uso comum da linguagem.
var Œª = "Verbum ‚ô•";
var œÄ = 3.14;

// String de m√∫ltiplass linhas.
var variable = "
    In princ√≠pio
    erat Verbum!
";

// Para valores comuns o tipo √© inferido automaticamente.
// Os caracteres e strings s√£o UNICODE.
// √â aceito aspas simples ou duplas para as strings e caracteres.
var variable :int       = 31337;
var variable :int       = -1337;
var variable :float     = 0.1337;
var variable :double    = 3.1337;
var variable :double    = -1.337;
var variable :bool      = true;
var variable :char      = '‚ô•';
var variable :string    = 'Verbum üòç';
var variavle :stream    = file.open('archive.bin');

// O UNICODE √© aceito no uso comum da linguagem.
var Œª = "Verbum ‚ô•";
var œÄ = 3.14;

// String de m√∫ltiplass linhas.
var variable = "
    In princ√≠pio
    erat Verbum!
";

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

variable = 10, b = 20, c = 30, d = 2.3, g = 'Verbum';

// Constantes aceitam apenas valores comuns.
var variable :const     = 31337;
var variable :const     = 3.1337;
var variable :const     = true;
var variable :const     = "Verbum üòç";

// Indexados, com acesso via n√∫mero do index.
var variable :array = [ 3, 1, 3, 3, 7 ];
var variable :array = [ 'V', '‚ô•', true, "Verbum üòç" ];
var variable :array = [ 10 :int, 20 :int, 30.3, 40 :float, true, n ];
var variable :array = [ ];

var variable :array = [
    1, 2, 3,
    [
        'a', 'b', 'c',
        "Verbum", "Divinus",
        3.1337
    ],
    [
        a, b, c,
        10 :int, 20 :int, 30 :float
    ]
];

// Associativos, com acesso via chave/hash.
var variable :array = {
    items: [
        { name: "Verbum"  },
        { name: "Divinus" },
        {
            values: [
                10, 20, 30:float, { name: "Member" }
            ]
        },
        31337
    ]
};

var variable = {
    value: 1.337 :double
};

// Exemplo de acessos em arrays associativos.
// variable.items[0].name             = 10; // Verbum
// variable.items[1].name             = 10; // Divinus
// variable.items[2].values[0]        = 10; // 10
// variable.items[2].values[3].name   = 10; // Member
// variable.items[3]                  = 10; // 31337

// Outros exemplos.
var variable :array = [
    { name: "Verbum" },
    10, 20, 30,
    {
        values: [
            31337 :double, { name: "Divinus" }
        ] 
    }
];


// Opera√ß√µes como valores.
// Obs: caso n√£o seja especificado tipo na vari√°vel, em opera√ß√µes aritm√©ticas
// o valor final √© automaticamente convertido para inteiro. Caso queira converter
// o valor final para outro, √© obrigat√≥rio especificar o tipo da vari√°vel, ex.: :float
var variable = (10 + (variable++) + (3.14 * 3) / --abc);

var variable = [
    1, 2, 3,
    (10 + ( 20 * 3 ) / 4),
    'str 1', "str 2"
];

var variable :array = [
    { name:  "Verbum" },
    {
        value: 'Divino',
        operation:  (3 + ( 3 ) + 3)
    }
];

var variable = [
    1, 2, 3,
    (10 + 20),
    'str 1', "str 2"
];

// variable[3]  = 333;   // Cont√™m valor 30.

// Fun√ß√£o an√¥nima como valor em vari√°vel.
var variable = (fn (a :int) -> int {
    ret a + 10;
});

// Fun√ß√£o an√¥nima com array indexado.
var variable = [
    31337,
    (fn (a :int, b :int) -> int {
        ret a + b;   
    })
];

// var value = variable[1](10, 20);

// Fun√ß√£o an√¥nima com array associativo.
var variable = {
    identifier : 'onclick',
    callback   : (fn (a :int, b :int) -> int {
        ret a + b;   
    })
};

var value = variable.callback(10, 20);

// Tipos de valores recebidos em vari√°veis.
var variable = true;
var variable = 'a';
var variable = 'string 1';
var variable = "string 2";
var variable = 123;
var variable = 3.14;
var variable = 0.12345;
var variable = [ 1, 2, 3 ];
var variable = { values: [ 1, 2, 3 ] };
var variable = anotherVariable;

var variable = functionName(10, 20, 30);
var variable = obj::functionName(10, 20, 30);
var variable = obj.functionName(10, 20, 30);

var variable = (10 + 20);
var variable = (variable * 10 + 20 / 30);

if (expression) 
    print("value 1");
elif (expression)
    print("value 2");
else
    print("value 3");


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }

// In principio erat Verbum.
try {

}

try 
    try {

    } catch (err) {
    }


// In principio erat Verbum.
try {

}


// In principio erat Verbum.

async fn http_get (link :string) -> string {
    // ...
    ret response;
}

var a =       example();
var a = await example();



// In principio erat Verbum.

async fn http_get (link :string) -> string {
    // ...
    ret response;
}

var a =       example();
var a = await example();



// In principio erat Verbum.

async fn http_get (link :string) -> string {
    // ...
    ret response;
}

var a =       example();
var a = await example();



if (a) 
    if (b) {
        if (c) 
            print("Verbum = if\n");
        elif (d)
            print("Verbum - elif\n");

        if (e) {
            print("Verbum - 3");

            if (f)
                print("Verbum - 3");
            else
                print("Verbum - else\n");
        }

        if (f)
            print("Verbum - 3");
    }
    elif (d)
        print("Verbum - elif\n");
    else
        print("Verbum - else\n");

if (b)
    print("Deus eh Bom");
else
    if (x)
        print("Verbum - else\n");

if (n)
    print("Jesus <3");


if (a) 
    if (b) {
        if (c) 
            print("Verbum = if\n");
        elif (d)
            print("Verbum - elif\n");

        if (e) {
            print("Verbum - 3");

            if (f)
                print("Verbum - 3");
            else
                print("Verbum - else\n");
        }

        if (f)
            print("Verbum - 3");
    }
    elif (d)
        print("Verbum - elif\n");
    else
        print("Verbum - else\n");

if (b)
    print("Deus eh Bom");
else
    if (x)
        print("Verbum - else\n");

if (n)
    print("Jesus <3");


if (a) 
    if (b) {
        if (c) 
            print("Verbum = if\n");
        elif (d)
            print("Verbum - elif\n");

        if (e) {
            print("Verbum - 3");

            if (f)
                print("Verbum - 3");
            else
                print("Verbum - else\n");
        }

        if (f)
            print("Verbum - 3");
    }
    elif (d)
        print("Verbum - elif\n");
    else
        print("Verbum - else\n");

if (b)
    print("Deus eh Bom");
else
    if (x)
        print("Verbum - else\n");

if (n)
    print("Jesus <3");

a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();
a.b.c().e().f.g();



var func = ()          => a * b;
var func = () -> float => a * b;
var func = () -> :int  => a * b;

var func = (a, b :int) => a * b;

var func = () -> int => a * b;

var func = (a :int, b :int) -> int => a * b; // Expl√≠cito

var func = (a, b) -> int => a * b + 1; // Inferido

var func = (a, b) => a * b + 1; // Inferido

var func = (a, b) => a * b; // Inferido como int, por padr√£o.

var func :float = (a, b) => a * b; // Inferido como float.

var func = (a :float, b) => a * b; // Inferido como float.

var func = (a, b, c:float) -> int => r a * b + c :int;

var func = (a) => a * 10;




